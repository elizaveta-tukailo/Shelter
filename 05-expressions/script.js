// Выражения и операторы. Преобразование типов.
console.log("--- Выражения и операторы. Преобразование типов. ---");

// Задание №1 - Записать в коротком виде: //
// let a = a + 5;
//     a += 5;

// let b = b * 15;
//     b *= 15;

// let c = c - 3;
//     c -= 3;

// let d = d % 2;
//     d %= 2;

// let k = a + k;
//     k += a;

// let l = l * b;
//     l *= b;

// let m = m * 3 * k;
//     m *= 3 * k;
 
// Задание №2 - Возвести переменную в куб, используя краткую запись. //
// let x = x ** 3;

// Задание №3 - Если переменная равна “маленький”, присвоить ей значение “большой”, иначе “маленький”. Сделать тоже самое, используя тернарный оператор. //
let y;
if  (y === 'маленький') {y = 'большой';}
    else {y = 'маленький';}

y === 'маленький' ? 'большой' : 'маленький';

// Задание №3 -  Записать условие, используя условный оператор if: если переменная меньше нуля: присвоить ей строку “меньше нуля”
//               если переменная равна нулю: присвоить 1 
//               если больше нуля: используя краткую запись, умножить переменную на 10.
//               Сделать тоже самое, используя тернарный оператор.//
let z=1;
if (z < 0) {z = 'меньше нуля';}
else if (z === 0) { z = 1; } 
  else {z *= 10;}  

(z < 0) ? 'меньше нуля' : (z === 0) ? z=1 : z *= 10;

// Задание №4 - Используя конструктор switch, записать следующее условие: //
a='собака';
if (a == 'котик') {
  console.log('котик');
} else if(a == 'собака') {
  console.log('собака');
} else if(a == 'хомячок') {
  console.log('хомячок');
} else {
  console.log('неизвестное науке животное');
}
//Важно: в консоли вы должны увидеть только одно условие из 4х.

switch(a) {
    case 'котик': 
      console.log('котик');
      break;
    case 'собака': 
      console.log('собака');
      break;
    case 'хомячок': 
      console.log('хомячок');
      break;
    default:
      console.log('неизвестное науке животное');
      break;
  }
// Задание №5 -  Чему равен x в каждом из примеров, объясните почему: //

// expr1 && expr2  Возвращает операнд expr1, если он может быть преобразован в false; (запинается на первой лжи)
// expr1 || expr2 возвращает операнд expr1, если он может быть преобразован в true; (запинается на первой правде)

//let x = 0 || 'строка';
//выведет 'строка'
//оператор ИЛИ возвращает то значение, на котором остановились вычисления

//let x = 1 && 'строка';
//выведет 'строка'
//выводит последнее true

//let x = null || 1;
//выведет 1
 //оператор ИЛИ возвращает то значение, на котором остановились вычисления. Причём, не преобразованное к логическому типу.

//let x = null && 1;
//выведет null
// первый аргумент - false, он и возвращается, а второй аргумент игнорируется

//let x = 1 && null;
//выведет null
//первый аргумент - true, а второй возвращает false , вернет null, поскольку запинается на лжи

//let x = null || 0 || 1;
//выведет 1
 //оператор ИЛИ возвращает то значение, на котором остановились вычисления. Причём, не преобразованное к логическому типу.

//let x = null && 0 && 1;
//выведет на null, выводится первое ложное
// первый аргумент false, на нем запинается И
    
// Задание №6 -  Чему равен x в каждом из примеров, объясните почему: //

//let x = 1 + 2 + '3';
// Ответ 33. Если хотя бы один операнд является строкой, то и другие будут также преобразованы в строку, но сначала вычисляется 1+2. Операторы рабоют один за другим.
//Сложение и преобразование строк — это особенность бинарного плюса +. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.


//let x = 1 + 2 - '1';
//Ответ 2. Бинарный минус вычитает значения.

//let x = '1' + 2 - 1;
//Ответ 11. 1+2 записываются в строку и следующим идет бинарный минус, который вычисляет 12-1=1

//let x = true + 1;
//Ответ 2. TRUE равно 1. 1+1 = 2

//let x = +'1' + 2;
//Ответ 3. +преобразует не числа в числа. Происходит сложение чисел.

//let x = null + 2;
//Ответ 2. Null ничему не равен. Ничего плюс 2 равно 2.

//let x = undefined + 2;
//NaN. Не совместимые типы для сложения. Undefined - значение неизвестно.

//let x = true + undefined;
//NaN. Значение является нечисловым. 




